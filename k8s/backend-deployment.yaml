---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: librescript
data:
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://+:80"
  AI_SERVICE_URL: "http://ai-service:5050"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: librescript
  labels:
    app: backend-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: librescript/backend-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: ASPNETCORE_ENVIRONMENT
        - name: ASPNETCORE_URLS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: ASPNETCORE_URLS
        - name: ConnectionStrings__DefaultConnection
          value: "Host=postgres;Port=5432;Database=your_db;Username=testuser;Password=testpass"
        - name: AI_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: AI_SERVICE_URL
        - name: Jwt__Key
          value: "cacacacacacacacacacacacacacacacacacacacacacacacacacacacacacaca"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: 
        - sh
        - -c
        - |
          until pg_isready -h postgres -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

---
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  namespace: librescript
  labels:
    app: backend-api
spec:
  selector:
    app: backend-api
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  type: ClusterIP 